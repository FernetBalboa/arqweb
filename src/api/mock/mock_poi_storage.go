// Code generated by MockGen. DO NOT EDIT.
// Source: poi_storage.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "github.com/fernetbalboa/arqweb/src/api/domain"
	gomock "github.com/golang/mock/gomock"
	go_geojson "github.com/paulmach/go.geojson"
	reflect "reflect"
)

// MockPOIStorage is a mock of POIStorage interface
type MockPOIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPOIStorageMockRecorder
}

// MockPOIStorageMockRecorder is the mock recorder for MockPOIStorage
type MockPOIStorageMockRecorder struct {
	mock *MockPOIStorage
}

// NewMockPOIStorage creates a new mock instance
func NewMockPOIStorage(ctrl *gomock.Controller) *MockPOIStorage {
	mock := &MockPOIStorage{ctrl: ctrl}
	mock.recorder = &MockPOIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPOIStorage) EXPECT() *MockPOIStorageMockRecorder {
	return m.recorder
}

// SavePOI mocks base method
func (m *MockPOIStorage) SavePOI(POI *domain.PointOfInterest) (*domain.PointOfInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePOI", POI)
	ret0, _ := ret[0].(*domain.PointOfInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePOI indicates an expected call of SavePOI
func (mr *MockPOIStorageMockRecorder) SavePOI(POI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePOI", reflect.TypeOf((*MockPOIStorage)(nil).SavePOI), POI)
}

// EditPOI mocks base method
func (m *MockPOIStorage) EditPOI(newVersionPOI *domain.PointOfInterest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPOI", newVersionPOI)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPOI indicates an expected call of EditPOI
func (mr *MockPOIStorageMockRecorder) EditPOI(newVersionPOI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPOI", reflect.TypeOf((*MockPOIStorage)(nil).EditPOI), newVersionPOI)
}

// SaveFeature mocks base method
func (m *MockPOIStorage) SaveFeature(feature *go_geojson.Feature) (*domain.PointOfInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFeature", feature)
	ret0, _ := ret[0].(*domain.PointOfInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFeature indicates an expected call of SaveFeature
func (mr *MockPOIStorageMockRecorder) SaveFeature(feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeature", reflect.TypeOf((*MockPOIStorage)(nil).SaveFeature), feature)
}

// SearchPOI mocks base method
func (m *MockPOIStorage) SearchPOI(filters *domain.POIFilter) ([]*domain.PointOfInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPOI", filters)
	ret0, _ := ret[0].([]*domain.PointOfInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPOI indicates an expected call of SearchPOI
func (mr *MockPOIStorageMockRecorder) SearchPOI(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPOI", reflect.TypeOf((*MockPOIStorage)(nil).SearchPOI), filters)
}

// GetCategories mocks base method
func (m *MockPOIStorage) GetCategories() ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockPOIStorageMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockPOIStorage)(nil).GetCategories))
}

// SearchCategory mocks base method
func (m *MockPOIStorage) SearchCategory(filters *domain.CategoryFilter) ([]*domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCategory", filters)
	ret0, _ := ret[0].([]*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCategory indicates an expected call of SearchCategory
func (mr *MockPOIStorageMockRecorder) SearchCategory(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCategory", reflect.TypeOf((*MockPOIStorage)(nil).SearchCategory), filters)
}

// AddCategory mocks base method
func (m *MockPOIStorage) AddCategory(category *domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockPOIStorageMockRecorder) AddCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockPOIStorage)(nil).AddCategory), category)
}

// EditCategory mocks base method
func (m *MockPOIStorage) EditCategory(newVersionCategory *domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCategory", newVersionCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCategory indicates an expected call of EditCategory
func (mr *MockPOIStorageMockRecorder) EditCategory(newVersionCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCategory", reflect.TypeOf((*MockPOIStorage)(nil).EditCategory), newVersionCategory)
}

// GetCategories mocks base method
func (m *MockPOIStorage) GetCategories() ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockPOIStorageMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockPOIStorage)(nil).GetCategories))
}

// AddCategory mocks base method
func (m *MockPOIStorage) AddCategory(name string, hidden bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", name, hidden)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockPOIStorageMockRecorder) AddCategory(name, hidden interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockPOIStorage)(nil).AddCategory), name, hidden)
}
